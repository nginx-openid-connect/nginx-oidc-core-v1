# -----------------------------------------------------------------------------#
#                                                                              #
#               Sample Configuration: Frontend Site, Backend App               #
#                       (for Open ID Connect workflow)                         #
#                                                                              #
# -----------------------------------------------------------------------------#

#
# Custom log format to include the 'sub' claim in the REMOTE_USER field.
#
log_format oidc_jwt '$remote_addr - $jwt_claim_sub [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                    '"$http_x_forwarded_for"';

#
# Upstream server for proxing to the frontend site.
# - Sample: ./docker/build-context/nginx/sample/proxy_server_frontend.conf
#
upstream my_frontend_site {
    zone my_frontend_site 64k;
    server 127.0.0.1:9091;
}

#
# Upstream sample for proxing to the backend API server.
# - Sample: ./docker/build-context/nginx/sample/proxy_server_backend.conf
#
upstream my_backend_app {
    zone my_backend_app 64k;
    server 127.0.0.1:9092;
}

#
# Frontend-site & backend-api-server for the OIDC workflow.
#
server {
    # Enable when debugging is needed.
    error_log  /var/log/nginx/error.log  debug; # Reduce severity level as required
    access_log /var/log/nginx/access.log main;

    # Replace the following server name with your host name.
    #
    # [Example: if you want to locally test OIDC in your laptop]
    #  - Add '127.0.0.1 nginx.oidc.test` in your `/etc/hosts'.
    #  - Use the command like 'make start'.
    #  - Type 'https://nginx.oidc.test' in your browser.
    #  - You will see the sample landing page and 'Sign In' button.
    #
    # listen 443 ssl;
    # server_name nginx.oidc.test;
    listen 8020; # Use SSL/TLS in production
    server_name nginx.oidc.test;

    # Replace the following files with your certificate.
    ssl_certificate     /etc/ssl/nginx/nginx-repo.crt;
    ssl_certificate_key /etc/ssl/nginx/nginx-repo.key;

    # OIDC workflow
    include conf.d/openid_connect.server_conf;  

    #
    # Frontend example:
    #
    #  - Default landing page: no need OIDC workflow to show 'Sign In' button.
    #  - The site is protected with OpenID Connect(OIDC) by calling the API 
    #    endpoint of `/signin` when users click 'login' button.
    #
    location / {
        proxy_pass http://my_frontend_site;
        access_log /var/log/nginx/access.log oidc_jwt;
    }

    #
    # Backend API example to interact with proxied backend service:
    #
    #  - This API resource is protected by access token which is received by IdP
    #    after successful signing-in among the frontend site, NGINX Plus and IdP.
    #
    #  - To ensure that client requests access the API securely, access token is
    #    used for API authorization.
    #    + Most of IdP generate an access token for API authorization of IdP's
    #      endpoints (like /userinfo) as well as customer's endpoints.
    #    + But Azure AD generate two types of access token for API authorization
    #      of Microsoft graph API endpoints and customers' endpoints.
    #    + Therefore, we recommend that you use $session_jwt for Azure AD and
    #      $access_token for most of IdPs such as Cognito, Auth0, Keycloak, Okta,
    #      OneLogin, Ping Identity, etc as for now.
    #
    location /v1/api/example {
        auth_jwt "" token=$access_token;      # Use $session_jwt for Azure AD
        auth_jwt_key_request /_jwks_uri;      # Enable when using URL
        #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename

        proxy_set_header Authorization "Bearer $access_token";
        proxy_pass http://my_backend_app;
        access_log /var/log/nginx/access.log oidc_jwt;
    }
}

# vim: syntax=nginx